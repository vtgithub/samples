/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WarehouseService {

  public interface Iface {

    public List<OrderStruct> getWarehousePendingOrderList() throws RemoteDaoException, org.apache.thrift.TException;

    public void changeOrderStatusToWarehouseProccessing(String orderId) throws RemoteDaoException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getWarehousePendingOrderList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeOrderStatusToWarehouseProccessing(String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<OrderStruct> getWarehousePendingOrderList() throws RemoteDaoException, org.apache.thrift.TException
    {
      send_getWarehousePendingOrderList();
      return recv_getWarehousePendingOrderList();
    }

    public void send_getWarehousePendingOrderList() throws org.apache.thrift.TException
    {
      getWarehousePendingOrderList_args args = new getWarehousePendingOrderList_args();
      sendBase("getWarehousePendingOrderList", args);
    }

    public List<OrderStruct> recv_getWarehousePendingOrderList() throws RemoteDaoException, org.apache.thrift.TException
    {
      getWarehousePendingOrderList_result result = new getWarehousePendingOrderList_result();
      receiveBase(result, "getWarehousePendingOrderList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.remoteDaoException != null) {
        throw result.remoteDaoException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWarehousePendingOrderList failed: unknown result");
    }

    public void changeOrderStatusToWarehouseProccessing(String orderId) throws RemoteDaoException, org.apache.thrift.TException
    {
      send_changeOrderStatusToWarehouseProccessing(orderId);
      recv_changeOrderStatusToWarehouseProccessing();
    }

    public void send_changeOrderStatusToWarehouseProccessing(String orderId) throws org.apache.thrift.TException
    {
      changeOrderStatusToWarehouseProccessing_args args = new changeOrderStatusToWarehouseProccessing_args();
      args.setOrderId(orderId);
      sendBase("changeOrderStatusToWarehouseProccessing", args);
    }

    public void recv_changeOrderStatusToWarehouseProccessing() throws RemoteDaoException, org.apache.thrift.TException
    {
      changeOrderStatusToWarehouseProccessing_result result = new changeOrderStatusToWarehouseProccessing_result();
      receiveBase(result, "changeOrderStatusToWarehouseProccessing");
      if (result.remoteDaoException != null) {
        throw result.remoteDaoException;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getWarehousePendingOrderList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWarehousePendingOrderList_call method_call = new getWarehousePendingOrderList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWarehousePendingOrderList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getWarehousePendingOrderList_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWarehousePendingOrderList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWarehousePendingOrderList_args args = new getWarehousePendingOrderList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OrderStruct> getResult() throws RemoteDaoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWarehousePendingOrderList();
      }
    }

    public void changeOrderStatusToWarehouseProccessing(String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeOrderStatusToWarehouseProccessing_call method_call = new changeOrderStatusToWarehouseProccessing_call(orderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeOrderStatusToWarehouseProccessing_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      public changeOrderStatusToWarehouseProccessing_call(String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeOrderStatusToWarehouseProccessing", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeOrderStatusToWarehouseProccessing_args args = new changeOrderStatusToWarehouseProccessing_args();
        args.setOrderId(orderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws RemoteDaoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_changeOrderStatusToWarehouseProccessing();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getWarehousePendingOrderList", new getWarehousePendingOrderList());
      processMap.put("changeOrderStatusToWarehouseProccessing", new changeOrderStatusToWarehouseProccessing());
      return processMap;
    }

    public static class getWarehousePendingOrderList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWarehousePendingOrderList_args> {
      public getWarehousePendingOrderList() {
        super("getWarehousePendingOrderList");
      }

      public getWarehousePendingOrderList_args getEmptyArgsInstance() {
        return new getWarehousePendingOrderList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWarehousePendingOrderList_result getResult(I iface, getWarehousePendingOrderList_args args) throws org.apache.thrift.TException {
        getWarehousePendingOrderList_result result = new getWarehousePendingOrderList_result();
        try {
          result.success = iface.getWarehousePendingOrderList();
        } catch (RemoteDaoException remoteDaoException) {
          result.remoteDaoException = remoteDaoException;
        }
        return result;
      }
    }

    public static class changeOrderStatusToWarehouseProccessing<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeOrderStatusToWarehouseProccessing_args> {
      public changeOrderStatusToWarehouseProccessing() {
        super("changeOrderStatusToWarehouseProccessing");
      }

      public changeOrderStatusToWarehouseProccessing_args getEmptyArgsInstance() {
        return new changeOrderStatusToWarehouseProccessing_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeOrderStatusToWarehouseProccessing_result getResult(I iface, changeOrderStatusToWarehouseProccessing_args args) throws org.apache.thrift.TException {
        changeOrderStatusToWarehouseProccessing_result result = new changeOrderStatusToWarehouseProccessing_result();
        try {
          iface.changeOrderStatusToWarehouseProccessing(args.orderId);
        } catch (RemoteDaoException remoteDaoException) {
          result.remoteDaoException = remoteDaoException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getWarehousePendingOrderList", new getWarehousePendingOrderList());
      processMap.put("changeOrderStatusToWarehouseProccessing", new changeOrderStatusToWarehouseProccessing());
      return processMap;
    }

    public static class getWarehousePendingOrderList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWarehousePendingOrderList_args, List<OrderStruct>> {
      public getWarehousePendingOrderList() {
        super("getWarehousePendingOrderList");
      }

      public getWarehousePendingOrderList_args getEmptyArgsInstance() {
        return new getWarehousePendingOrderList_args();
      }

      public AsyncMethodCallback<List<OrderStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<OrderStruct>>() { 
          public void onComplete(List<OrderStruct> o) {
            getWarehousePendingOrderList_result result = new getWarehousePendingOrderList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWarehousePendingOrderList_result result = new getWarehousePendingOrderList_result();
            if (e instanceof RemoteDaoException) {
                        result.remoteDaoException = (RemoteDaoException) e;
                        result.setRemoteDaoExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWarehousePendingOrderList_args args, org.apache.thrift.async.AsyncMethodCallback<List<OrderStruct>> resultHandler) throws TException {
        iface.getWarehousePendingOrderList(resultHandler);
      }
    }

    public static class changeOrderStatusToWarehouseProccessing<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeOrderStatusToWarehouseProccessing_args, Void> {
      public changeOrderStatusToWarehouseProccessing() {
        super("changeOrderStatusToWarehouseProccessing");
      }

      public changeOrderStatusToWarehouseProccessing_args getEmptyArgsInstance() {
        return new changeOrderStatusToWarehouseProccessing_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            changeOrderStatusToWarehouseProccessing_result result = new changeOrderStatusToWarehouseProccessing_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeOrderStatusToWarehouseProccessing_result result = new changeOrderStatusToWarehouseProccessing_result();
            if (e instanceof RemoteDaoException) {
                        result.remoteDaoException = (RemoteDaoException) e;
                        result.setRemoteDaoExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeOrderStatusToWarehouseProccessing_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.changeOrderStatusToWarehouseProccessing(args.orderId,resultHandler);
      }
    }

  }

  public static class getWarehousePendingOrderList_args implements org.apache.thrift.TBase<getWarehousePendingOrderList_args, getWarehousePendingOrderList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWarehousePendingOrderList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWarehousePendingOrderList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWarehousePendingOrderList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWarehousePendingOrderList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWarehousePendingOrderList_args.class, metaDataMap);
    }

    public getWarehousePendingOrderList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWarehousePendingOrderList_args(getWarehousePendingOrderList_args other) {
    }

    public getWarehousePendingOrderList_args deepCopy() {
      return new getWarehousePendingOrderList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWarehousePendingOrderList_args)
        return this.equals((getWarehousePendingOrderList_args)that);
      return false;
    }

    public boolean equals(getWarehousePendingOrderList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWarehousePendingOrderList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWarehousePendingOrderList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWarehousePendingOrderList_argsStandardSchemeFactory implements SchemeFactory {
      public getWarehousePendingOrderList_argsStandardScheme getScheme() {
        return new getWarehousePendingOrderList_argsStandardScheme();
      }
    }

    private static class getWarehousePendingOrderList_argsStandardScheme extends StandardScheme<getWarehousePendingOrderList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWarehousePendingOrderList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWarehousePendingOrderList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWarehousePendingOrderList_argsTupleSchemeFactory implements SchemeFactory {
      public getWarehousePendingOrderList_argsTupleScheme getScheme() {
        return new getWarehousePendingOrderList_argsTupleScheme();
      }
    }

    private static class getWarehousePendingOrderList_argsTupleScheme extends TupleScheme<getWarehousePendingOrderList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWarehousePendingOrderList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWarehousePendingOrderList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getWarehousePendingOrderList_result implements org.apache.thrift.TBase<getWarehousePendingOrderList_result, getWarehousePendingOrderList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWarehousePendingOrderList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWarehousePendingOrderList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField REMOTE_DAO_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteDaoException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWarehousePendingOrderList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWarehousePendingOrderList_resultTupleSchemeFactory());
    }

    public List<OrderStruct> success; // required
    public RemoteDaoException remoteDaoException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      REMOTE_DAO_EXCEPTION((short)1, "remoteDaoException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // REMOTE_DAO_EXCEPTION
            return REMOTE_DAO_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderStruct.class))));
      tmpMap.put(_Fields.REMOTE_DAO_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("remoteDaoException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWarehousePendingOrderList_result.class, metaDataMap);
    }

    public getWarehousePendingOrderList_result() {
    }

    public getWarehousePendingOrderList_result(
      List<OrderStruct> success,
      RemoteDaoException remoteDaoException)
    {
      this();
      this.success = success;
      this.remoteDaoException = remoteDaoException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWarehousePendingOrderList_result(getWarehousePendingOrderList_result other) {
      if (other.isSetSuccess()) {
        List<OrderStruct> __this__success = new ArrayList<OrderStruct>(other.success.size());
        for (OrderStruct other_element : other.success) {
          __this__success.add(new OrderStruct(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRemoteDaoException()) {
        this.remoteDaoException = new RemoteDaoException(other.remoteDaoException);
      }
    }

    public getWarehousePendingOrderList_result deepCopy() {
      return new getWarehousePendingOrderList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.remoteDaoException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OrderStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OrderStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<OrderStruct>();
      }
      this.success.add(elem);
    }

    public List<OrderStruct> getSuccess() {
      return this.success;
    }

    public getWarehousePendingOrderList_result setSuccess(List<OrderStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public RemoteDaoException getRemoteDaoException() {
      return this.remoteDaoException;
    }

    public getWarehousePendingOrderList_result setRemoteDaoException(RemoteDaoException remoteDaoException) {
      this.remoteDaoException = remoteDaoException;
      return this;
    }

    public void unsetRemoteDaoException() {
      this.remoteDaoException = null;
    }

    /** Returns true if field remoteDaoException is set (has been assigned a value) and false otherwise */
    public boolean isSetRemoteDaoException() {
      return this.remoteDaoException != null;
    }

    public void setRemoteDaoExceptionIsSet(boolean value) {
      if (!value) {
        this.remoteDaoException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OrderStruct>)value);
        }
        break;

      case REMOTE_DAO_EXCEPTION:
        if (value == null) {
          unsetRemoteDaoException();
        } else {
          setRemoteDaoException((RemoteDaoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case REMOTE_DAO_EXCEPTION:
        return getRemoteDaoException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case REMOTE_DAO_EXCEPTION:
        return isSetRemoteDaoException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWarehousePendingOrderList_result)
        return this.equals((getWarehousePendingOrderList_result)that);
      return false;
    }

    public boolean equals(getWarehousePendingOrderList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_remoteDaoException = true && this.isSetRemoteDaoException();
      boolean that_present_remoteDaoException = true && that.isSetRemoteDaoException();
      if (this_present_remoteDaoException || that_present_remoteDaoException) {
        if (!(this_present_remoteDaoException && that_present_remoteDaoException))
          return false;
        if (!this.remoteDaoException.equals(that.remoteDaoException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWarehousePendingOrderList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRemoteDaoException()).compareTo(other.isSetRemoteDaoException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemoteDaoException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteDaoException, other.remoteDaoException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWarehousePendingOrderList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("remoteDaoException:");
      if (this.remoteDaoException == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteDaoException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWarehousePendingOrderList_resultStandardSchemeFactory implements SchemeFactory {
      public getWarehousePendingOrderList_resultStandardScheme getScheme() {
        return new getWarehousePendingOrderList_resultStandardScheme();
      }
    }

    private static class getWarehousePendingOrderList_resultStandardScheme extends StandardScheme<getWarehousePendingOrderList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWarehousePendingOrderList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<OrderStruct>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    OrderStruct _elem2;
                    _elem2 = new OrderStruct();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // REMOTE_DAO_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.remoteDaoException = new RemoteDaoException();
                struct.remoteDaoException.read(iprot);
                struct.setRemoteDaoExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWarehousePendingOrderList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OrderStruct _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.remoteDaoException != null) {
          oprot.writeFieldBegin(REMOTE_DAO_EXCEPTION_FIELD_DESC);
          struct.remoteDaoException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWarehousePendingOrderList_resultTupleSchemeFactory implements SchemeFactory {
      public getWarehousePendingOrderList_resultTupleScheme getScheme() {
        return new getWarehousePendingOrderList_resultTupleScheme();
      }
    }

    private static class getWarehousePendingOrderList_resultTupleScheme extends TupleScheme<getWarehousePendingOrderList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWarehousePendingOrderList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRemoteDaoException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OrderStruct _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetRemoteDaoException()) {
          struct.remoteDaoException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWarehousePendingOrderList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OrderStruct>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              OrderStruct _elem7;
              _elem7 = new OrderStruct();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.remoteDaoException = new RemoteDaoException();
          struct.remoteDaoException.read(iprot);
          struct.setRemoteDaoExceptionIsSet(true);
        }
      }
    }

  }

  public static class changeOrderStatusToWarehouseProccessing_args implements org.apache.thrift.TBase<changeOrderStatusToWarehouseProccessing_args, changeOrderStatusToWarehouseProccessing_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeOrderStatusToWarehouseProccessing_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeOrderStatusToWarehouseProccessing_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeOrderStatusToWarehouseProccessing_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeOrderStatusToWarehouseProccessing_argsTupleSchemeFactory());
    }

    public String orderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeOrderStatusToWarehouseProccessing_args.class, metaDataMap);
    }

    public changeOrderStatusToWarehouseProccessing_args() {
    }

    public changeOrderStatusToWarehouseProccessing_args(
      String orderId)
    {
      this();
      this.orderId = orderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeOrderStatusToWarehouseProccessing_args(changeOrderStatusToWarehouseProccessing_args other) {
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
    }

    public changeOrderStatusToWarehouseProccessing_args deepCopy() {
      return new changeOrderStatusToWarehouseProccessing_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public changeOrderStatusToWarehouseProccessing_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeOrderStatusToWarehouseProccessing_args)
        return this.equals((changeOrderStatusToWarehouseProccessing_args)that);
      return false;
    }

    public boolean equals(changeOrderStatusToWarehouseProccessing_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(changeOrderStatusToWarehouseProccessing_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeOrderStatusToWarehouseProccessing_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeOrderStatusToWarehouseProccessing_argsStandardSchemeFactory implements SchemeFactory {
      public changeOrderStatusToWarehouseProccessing_argsStandardScheme getScheme() {
        return new changeOrderStatusToWarehouseProccessing_argsStandardScheme();
      }
    }

    private static class changeOrderStatusToWarehouseProccessing_argsStandardScheme extends StandardScheme<changeOrderStatusToWarehouseProccessing_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeOrderStatusToWarehouseProccessing_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeOrderStatusToWarehouseProccessing_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeOrderStatusToWarehouseProccessing_argsTupleSchemeFactory implements SchemeFactory {
      public changeOrderStatusToWarehouseProccessing_argsTupleScheme getScheme() {
        return new changeOrderStatusToWarehouseProccessing_argsTupleScheme();
      }
    }

    private static class changeOrderStatusToWarehouseProccessing_argsTupleScheme extends TupleScheme<changeOrderStatusToWarehouseProccessing_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeOrderStatusToWarehouseProccessing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeOrderStatusToWarehouseProccessing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
      }
    }

  }

  public static class changeOrderStatusToWarehouseProccessing_result implements org.apache.thrift.TBase<changeOrderStatusToWarehouseProccessing_result, changeOrderStatusToWarehouseProccessing_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeOrderStatusToWarehouseProccessing_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeOrderStatusToWarehouseProccessing_result");

    private static final org.apache.thrift.protocol.TField REMOTE_DAO_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteDaoException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeOrderStatusToWarehouseProccessing_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeOrderStatusToWarehouseProccessing_resultTupleSchemeFactory());
    }

    public RemoteDaoException remoteDaoException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REMOTE_DAO_EXCEPTION((short)1, "remoteDaoException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REMOTE_DAO_EXCEPTION
            return REMOTE_DAO_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REMOTE_DAO_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("remoteDaoException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeOrderStatusToWarehouseProccessing_result.class, metaDataMap);
    }

    public changeOrderStatusToWarehouseProccessing_result() {
    }

    public changeOrderStatusToWarehouseProccessing_result(
      RemoteDaoException remoteDaoException)
    {
      this();
      this.remoteDaoException = remoteDaoException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeOrderStatusToWarehouseProccessing_result(changeOrderStatusToWarehouseProccessing_result other) {
      if (other.isSetRemoteDaoException()) {
        this.remoteDaoException = new RemoteDaoException(other.remoteDaoException);
      }
    }

    public changeOrderStatusToWarehouseProccessing_result deepCopy() {
      return new changeOrderStatusToWarehouseProccessing_result(this);
    }

    @Override
    public void clear() {
      this.remoteDaoException = null;
    }

    public RemoteDaoException getRemoteDaoException() {
      return this.remoteDaoException;
    }

    public changeOrderStatusToWarehouseProccessing_result setRemoteDaoException(RemoteDaoException remoteDaoException) {
      this.remoteDaoException = remoteDaoException;
      return this;
    }

    public void unsetRemoteDaoException() {
      this.remoteDaoException = null;
    }

    /** Returns true if field remoteDaoException is set (has been assigned a value) and false otherwise */
    public boolean isSetRemoteDaoException() {
      return this.remoteDaoException != null;
    }

    public void setRemoteDaoExceptionIsSet(boolean value) {
      if (!value) {
        this.remoteDaoException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REMOTE_DAO_EXCEPTION:
        if (value == null) {
          unsetRemoteDaoException();
        } else {
          setRemoteDaoException((RemoteDaoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REMOTE_DAO_EXCEPTION:
        return getRemoteDaoException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REMOTE_DAO_EXCEPTION:
        return isSetRemoteDaoException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeOrderStatusToWarehouseProccessing_result)
        return this.equals((changeOrderStatusToWarehouseProccessing_result)that);
      return false;
    }

    public boolean equals(changeOrderStatusToWarehouseProccessing_result that) {
      if (that == null)
        return false;

      boolean this_present_remoteDaoException = true && this.isSetRemoteDaoException();
      boolean that_present_remoteDaoException = true && that.isSetRemoteDaoException();
      if (this_present_remoteDaoException || that_present_remoteDaoException) {
        if (!(this_present_remoteDaoException && that_present_remoteDaoException))
          return false;
        if (!this.remoteDaoException.equals(that.remoteDaoException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(changeOrderStatusToWarehouseProccessing_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRemoteDaoException()).compareTo(other.isSetRemoteDaoException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemoteDaoException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteDaoException, other.remoteDaoException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeOrderStatusToWarehouseProccessing_result(");
      boolean first = true;

      sb.append("remoteDaoException:");
      if (this.remoteDaoException == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteDaoException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeOrderStatusToWarehouseProccessing_resultStandardSchemeFactory implements SchemeFactory {
      public changeOrderStatusToWarehouseProccessing_resultStandardScheme getScheme() {
        return new changeOrderStatusToWarehouseProccessing_resultStandardScheme();
      }
    }

    private static class changeOrderStatusToWarehouseProccessing_resultStandardScheme extends StandardScheme<changeOrderStatusToWarehouseProccessing_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeOrderStatusToWarehouseProccessing_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REMOTE_DAO_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.remoteDaoException = new RemoteDaoException();
                struct.remoteDaoException.read(iprot);
                struct.setRemoteDaoExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeOrderStatusToWarehouseProccessing_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.remoteDaoException != null) {
          oprot.writeFieldBegin(REMOTE_DAO_EXCEPTION_FIELD_DESC);
          struct.remoteDaoException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeOrderStatusToWarehouseProccessing_resultTupleSchemeFactory implements SchemeFactory {
      public changeOrderStatusToWarehouseProccessing_resultTupleScheme getScheme() {
        return new changeOrderStatusToWarehouseProccessing_resultTupleScheme();
      }
    }

    private static class changeOrderStatusToWarehouseProccessing_resultTupleScheme extends TupleScheme<changeOrderStatusToWarehouseProccessing_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeOrderStatusToWarehouseProccessing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRemoteDaoException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRemoteDaoException()) {
          struct.remoteDaoException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeOrderStatusToWarehouseProccessing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.remoteDaoException = new RemoteDaoException();
          struct.remoteDaoException.read(iprot);
          struct.setRemoteDaoExceptionIsSet(true);
        }
      }
    }

  }

}
